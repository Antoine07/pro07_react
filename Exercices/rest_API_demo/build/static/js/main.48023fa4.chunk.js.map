{"version":3,"sources":["reducers/shop.js","reducers/index.js","components/Author.js","App.js","actions/actions-types.js","constants/actions.js","serviceWorker.js","index.js"],"names":["initialState","authors","loading","author","count","combineReducers","shop","state","action","type","newAuthors","payload","concat","length","Author","name","bio","books","shop_name","className","style","fontSize","map","book","i","key","App","useSelector","dispatch","useDispatch","useEffect","headers","method","Headers","mode","cache","a","Promise","r","setTimeout","isLoading","fetch","results","json","fetchAsyncAuthors","fetch_authors_async","handleAuthor","id","result","data","JSON","parse","fetchAsyncAuthor","fetch_author_async","console","log","Fragment","onClick","_id","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.48023fa4.chunk.js","sourcesContent":["const initialState = {\n    authors: [],\n    loading: true,\n    author: '', \n    count : 0\n}\n\nexport default (state = initialState, action = {}) => {\n\n    switch (action.type) {\n\n        case 'FETCH_AUTHORS':\n            const newAuthors = action.payload;\n\n            const authors = state.authors.concat(newAuthors);\n\n            return {\n                ...state,\n                authors: authors,\n                count : authors.length\n            }\n\n        case 'LOADING':\n\n            return {\n                ...state,\n                loading: action.loading\n            }\n\n        case 'FETCH_AUTHOR':\n\n            const author = action.payload;\n\n            return {\n                ...state,\n                author: author\n            }\n\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\n\nimport shop from './shop';\n\nexport default combineReducers({\n    shop\n});","import React from 'react';\n\nconst Author = ({ name, bio, books, shop_name }) => {\n  return (\n    <div className=\"Author\">\n      <h1 style={{fontSize : \"18px\"}}>Nom de l'auteur : {name}</h1>\n      <p>Bio: {bio}</p>\n      {books &&\n        <ul>\n          {books.map((book, i) => <li key={i}>{book}</li>)}\n        </ul>\n      }\n    </div>\n  );\n}\n\nexport default Author;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetch_authors_async, fetch_author_async } from './actions/actions-types';\nimport Author from './components/Author';\n\nimport './App.css';\n\nconst App = () => {\n  const { loading, authors, author, count } = useSelector(state => state.shop);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetch_authors_async());\n    return () => {\n    };\n  }, []);\n\n  const handleAuthor = id => {\n    dispatch(fetch_author_async(id));\n  }\n\n  console.log(author)\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <h2>Nombre d'auteurs : {count}</h2>\n        <div className=\"col-md-8\">\n          {loading && <p>Loading ...</p>}\n          {authors && authors.map((a, i) =>\n            <React.Fragment key={i}>\n              <h2>{a.name} </h2>\n              <button className=\"btn btn-warning\" onClick={() => handleAuthor(a._id)} >DÃ©tails</button>\n            </React.Fragment>\n          )}\n        </div>\n        <div className=\"col-md-4\">\n          {author && <Author {...author} />}\n        </div>\n      </div>\n    </div >\n  );\n}\n\nexport default App;\n","import { FETCH_AUTHORS, FETCH_AUTHOR } from '../constants/actions';\n\n// const URL = process.env.REACT_APP_URL;\n\nconst URL = \"http://localhost:3000\";\n\n\nexport const fetch_authors = payload => {\n    return {\n        type: FETCH_AUTHORS, payload\n    };\n}\n\nexport const fetch_author = payload => {\n    return {\n        type: FETCH_AUTHOR, payload\n    };\n}\n\nexport const fetch_authors_async = () => {\n\n    const headers = {\n        method: 'GET',\n        headers: new Headers(),\n        mode: 'cors',\n        cache: 'default'\n    };\n\n    return dispatch => {\n\n        const fetchAsyncAuthors = async () => {\n\n            dispatch({ type: 'LOADING', loading: true });\n\n            const isLoading = await new Promise(r => {\n                setTimeout(() => {\n                    r(false);\n                }, 1000);\n            });\n\n            const results = await fetch(`${URL}/authors`, headers);\n            const authors = await results.json();\n\n            dispatch(fetch_authors(authors));\n            dispatch({ type: 'LOADING', loading: isLoading });\n        }\n\n        fetchAsyncAuthors();\n    };\n}\n\nexport const fetch_author_async = id => {\n\n    const headers = {\n        method: 'GET',\n        headers: new Headers(),\n        mode: 'cors',\n        cache: 'default'\n    };\n\n    return dispatch => {\n\n        const fetchAsyncAuthor = async id => {\n            const result = await fetch(`${URL}/author/${id}`,\n                {\n                    method: 'GET', headers: { \"Content-Type\": \"application/json\" }\n                });\n\n            const data = await result.json();\n\n            dispatch(fetch_author( JSON.parse( data.author )) );\n        }\n\n        fetchAsyncAuthor(id);\n    };\n}\n","export const FETCH_AUTHORS = 'FETCH_AUTHORS';\nexport const FETCH_AUTHOR = 'FETCH_AUTHOR';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport shop from './reducers/index';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(shop, applyMiddleware(thunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}